# 100-Python-challenging-programming-exercises
1. convert a list to dic
a = [1,2,3]
b = ['a','b','c']

D = dict(zip(b,a))
print(D)

2. Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5,
between 2000 and 3200 (both included).
The numbers obtained should be printed in a comma-separated sequence on a single line.

a = []
for i in range(2000,3201):
    if i % 7 == 0 and i % 5 != 0:
        a.append(i)
print(a)

3. Question:
Write a program which can compute the factorial of a given numbers.
The results should be printed in a comma-separated sequence on a single line.
Suppose the following input is supplied to the program:
8
Then, the output should be:
40320

def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n-1)

print(factorial(8))

4.Question:
With a given integral number n, write a program to generate a dictionary that contains (i, i*i) 
such that is an integral number between 1 and n (both included). 
and then the program should print the dictionary.
Suppose the following input is supplied to the program:
8
Then, the output should be:
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}

def dict(n):
    d = {i:i*i for i in range(1,n+1)}
    return d

print(dict(8))

5.Question:
Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple 
which contains every number.
Suppose the following input is supplied to the program:
34,67,55,33,12,98
Then, the output should be:
['34', '67', '55', '33', '12', '98']
('34', '67', '55', '33', '12', '98')

def values(name):
    d = name.split(",")
    print(list(d))
    print(tuple(d))

values("34,67,55,33,12,98")

6.Question:
Define a class which has at least two methods:
getString: to get a string from console input
printString: to print the string in upper case.
Also please include simple test function 
to test the class methods.
class Hel:
    def __init__(self,value):
        self.data = value

    def getString(self):
        return self.data

    def printString(self):
        return self.data.upper()

    def test(self):
        pass

d = input("what do you want to input?")
x = hel(d)
print(x.printString())
print(x.getString())

7.Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50. H is 30.
D is the variable whose values should be input to your program in a comma-separated sequence.
Example
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24

import math
def calculate(sequence,C=50,H=30):
    s = sequence.split(",")
    a = []
    for D in s:
        print(D)
        a.append(round(math.sqrt((2 * C * int(D))/H)))
    return a

print(calculate("100,150,180"))

8. Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. 
The element value in the i-th row and j-th column of the array should be i*j.
Note: i=0,1.., X-1; j=0,1,¡­Y-1.
Example
Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]] 

def dimentional(x,y):
    mylist = [([0]*y) for j in range(x)]
    for i in range(x):
        for j in range(y):
            mylist[i][j] = i*j
    return mylist

print(dimentional(3,5))

9.Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world

word = "without,hello,bag,world"
item = [x for x in word.split(",")]
item.sort()
print(','.join(item))

10.Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
Suppose the following input is supplied to the program:
Hello world
Practice makes perfect
Then, the output should be:
HELLO WORLD
PRACTICE MAKES PERFECT

word = input("plz write a sequence:")
if word:
    print(word.upper())
else:
    break
    
11.Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world

import collections
sentence = """hello world and practice makes perfect and hello world again"""
words = sentence.split()
#word_counts = collections.Counter(words)
a = []
for i in words:
    if i not in a:
        a.append(i)

print(a)

12. Write a program, which will find all such numbers between 1000 and 3000 (both included) 
such that each digit of the number is an even number.
The numbers obtained should be printed in a comma-separated sequence on a single line.

a = []
for i in range(1000,3001):
    s = str(i)
    if (int(s[0]) % 2) == 0 and (int(s[2]) % 2) == 0 and (int(s[3]) % 2) == 0 and (int(s[3]) % 2) == 0:
        a.append(s)
print(a)

13.Write a program that accepts a sentence and calculate the number of letters and digits.
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
DIGITS 3

a = input("plz input your words and numbers:")
d = {"digit":0,"letters":0}
for i in a:
    if i.isdigit():
        d["digit"]+=1
    elif i.isalpha():
        d["letters"]+=1
    else:
        pass
print("LETTERS",d["letters"])
print("DIGITS",d["digit"])

14.Write a program that accepts a sentence and calculate the number of upper case letters 
and lower case letters.
Suppose the following input is supplied to the program:
Hello world!
Then, the output should be:
UPPER CASE 1
LOWER CASE  9

a = input("plz input your words and numbers:")
d = {"UPPER CASE":0,"LOWER CASE":0}
for i in a:
    if i.istitle():
        d["UPPER CASE"]+=1
    elif i.islower():
        d["LOWER CASE"]+=1
    else:
        pass
print("UPPER CASE",d["UPPER CASE"])
print("LOWER CASE ",d["LOWER CASE"])

15.Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.
Suppose the following input is supplied to the program:
9
Then, the output should be:
11106
def calculate(n):
    total = n*1+n*11+n*111+n*1111
    return total

print(calculate(9))

n1 = int( "%s" % a )
n2 = int( "%s%s" % (a,a) )
n3 = int( "%s%s%s" % (a,a,a) )
n4 = int( "%s%s%s%s" % (a,a,a,a) )
print n1+n2+n3+n4

16.Use a list comprehension to square each odd number in a list. The list is input by a sequence of comma-separated numbers.
Suppose the following input is supplied to the program:
1,2,3,4,5,6,7,8,9
Then, the output should be:
1,3,5,7,9

def calculate(n):
    no = n.split(",")
    a = []
    for i in no:
        if (int(i) % 2) != 0:
            a.append(i)
    return a


print(calculate("1,2,3,4,5,6,7,8,9"))

17.Write a program that computes the net amount of a bank account based a transaction log from console input. 
The transaction log format is shown as following:
D 100
W 200
¡
D means deposit while W means withdrawal.
Suppose the following input is supplied to the program:
D 300
D 300
W 200
D 100
Then, the output should be:
500

def transaction():
    n = input("input the trade record:")
    a = n.split()
    net_amount = 0
    if a[0] == "D":
        net_amount += int(a[1])
    elif a[0] == "W":
        net_amount -= int(a[1])
    print("the netamount is : %s" % net_amount)
    return net_amount
print(transaction())

18. Question:
A website requires the users to input username and password to register. 
Write a program to check the validity of password input by users.
Following are the criteria for checking the password:
1. At least 1 letter between [a-z]
2. At least 1 number between [0-9]
1. At least 1 letter between [A-Z]
3. At least 1 character from [$#@]
4. Minimum length of transaction password: 6
5. Maximum length of transaction password: 12
Your program should accept a sequence of comma separated passwords and 
will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.
Example
If the following passwords are given as input to the program:
a F1#,2w3E*,2We3345,ABd1234@1
Then, the output of the program should be:
ABd1234@1

import re
def pass_criteria():
    n = input("plz set your password:")
    pattern = "[$#@]"
    p = n.split(",")
    for i in p:
        if 6<len(i)<12 and (any(x.isupper() for x in i)) and (any(x.islower() for x in i)) \
                and (any(x.isdigit() for x in i)) and re.findall(pattern,i):
            print("Welcome! The Password successfully created!")
            return i
        else:
            pass

print(pass_criteria())

19. You are required to write a program to sort the (name, age, height) tuples by ascending order where name is string,
age and height are numbers. The tuples are input by console. The sort criteria is:
1: Sort based on name;
2: Then sort based on age;
3: Then sort by score.
The priority is that name > age > score.
If the following tuples are given as input to the program:
Tom,19,80
John,20,90
Jony,17,91
Jony,17,93
Json,21,85
Then, the output of the program should be:
[('John', '20', '90'), ('Jony', '17', '91'), ('Jony', '17', '93'), ('Json', '21', '85'), ('Tom', '19', '80')]

A1:
def sort_tuple():
    n = input("input (name,age,height):")
    a = n.split(" ")
    print(sorted(a))

print(sort_tuple())

A2:
from operator import itemgetter
def sort_tuple():
    l = []
    s = input()
    x = str(s.split(" "))
    l.append(tuple(x.split(",")))
    sorted(l,key=itemgetter(0,1,2))
    return l
print(sort_tuple())

20.Define a class with a generator which can iterate the numbers, 
which are divisible by 7, between a given range 0 and n.

# class generator:
#     def __init__(self,start,end):
#         self.start = start
#         self.end = end
#
#     def div(self):
#         a = []
#         for i in range(self.start,self.end):
#             if i % 7 == 0:
#                 a.append(i)
#         return a
#
#
# x = generator(0,22)
# print(x.div())

def putNumbers(n):
    for i in range(n):
        if i % 7 == 0:
            yield i

for i in putNumbers(22):
    print(i)
    
21. A robot moves in a plane starting from the original point (0,0). 
The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. 
The trace of robot movement is shown as the following:
UP 5
DOWN 3
LEFT 3
RIGHT 2
¡
The numbers after the direction are steps. 
Please write a program to compute the distance from current position after a sequence of movement and original point.
If the distance is a float, then just print the nearest integer.
Example:
If the following tuples are given as input to the program:
UP 5
DOWN 3
LEFT 3
RIGHT 2
Then, the output of the program should be:
2

def robot(command):
    x = 0
    y = 0
    lines = command.split("\n")
    for i in lines:
        if i == '':
            continue
        i = list(i.split(" "))
        motion = i[0]
        steps = i[1]
        if motion == "UP":
            y += int(steps)
        elif motion  == "DOWN":
            y -= int(steps)
        elif motion  == "LEFT":
            x -= int(steps)
        elif motion  == "RIGHT":
            x += int(steps)

    return x,y
cmd = '''
UP 5
DOWN 1
LEFT 3
RIGHT 2
'''
print(robot(cmd))



