1. Josepy game:
def Jos(a):
    N = len(a)
    i = 0
    while len(a) >= 3:
        i = (i+2)%len(a)
        print (a[i])
        del a[i]
        
def Jos(a,idx):
    N = len(a)
    if N < 3: return
    i = (idx+2)%N
    print(a[i])
    del a[i]
    Jos(a, i)
        
def Jos(a):
    while len(a) > 3:
        b = []
        for i in range(len(a)):
            if (i+1)%3 != 0:
                b.append(a[i])
            else:
                print(a[i])
        a = b

def Jos2(a):
    if len(a) < 3:
        return

    b = []
    for i in range(len(a)):
        if (i+1)%3 != 0:
            b.append(a[i])
        else:
            print(a[i])
    Jos2(b)

a = [i for i in range(1,1600000)]
Jos2(a)

2. def opr(oper,x,y):
    if oper == '+':
        return y+x
    if oper == '-':
        return y-x
    if oper == '*':
        return y*x
    if oper == '/':
        return y/x

def RPN(list):
    l = len(list)
    if l == 0: return
    a = []
    for i in range(0,len(list)):
        idx = list[i]
        if idx == '-' or idx == '+' or idx == '*' or idx == '/':
            x = a.pop()
            y = a.pop()
            a.append(int(opr(idx,x,y)))
        else:
            a.append(idx)
    return a


list = (1,2,'-',4,5,'+','*')
print(RPN(list))

3. 汉诺塔
def move(i,n,a,b,c):
    if n == 1:
        print(i, a, "->", c)
        return
    move(n-1, n-1,a,c,b)
    move(n,   1,  a,b,c)
    move(n-1, n-1,b,a,c)

move(4, 4,'a','b','c')

4. 
class Node():
    def __init__(self,val):
        self.l = None
        self.r = None
        self.v = val


class Tree():
    def __init__(self):
        self.root = None

    def getroot(self):
        return self.root

    def add(self,val):
        if self.root == None:
            self.root = Node(val)
        else:
            self._add(val,self.root)

    def _add(self,val,node):
        if val < node.v:
            if node.l != None:
                self._add(val,node.l)
            else:
                node.l = Node(val)
        else:
            if node.r != None:
                self._add(val,node.r)
            else:
                node.r = Node(val)

    def printtree(self):
        if self.root != None:
            return self._printtree(self.root)

    def _printtree(self,node):
        if node != None:
            print(node.v)
            self._printtree(node.l)
            self._printtree(node.r)

tree = Tree()
tree.add(3)
tree.add(1)
tree.add(6)
tree.add(1)
tree.add(9)
tree.printtree()

5.八皇后问题
from itertools import *
cols = range(n)
count = 0
for vec in permutations(cols):
    if (n == len(set(vec[i]+i for i in cols))
          == len(set(vec[i]-i for i in cols))):
        count += 1
        print(vec)
        print(count)
        
 6. recursion
# def length(string):
#     if string == '':
#         return 0
#     return length(string[1:])+1
#
# print(length('hello'))



def swap(string):
    l = len(string)
    if l <= 1:
        return string
    if l == 2:
        return string[1:]+string[0:1]
    return swap(string[0:2]) + swap(string[2:l])

print(swap('abcdef')) 
        
